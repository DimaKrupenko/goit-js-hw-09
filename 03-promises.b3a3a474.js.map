{"mappings":"iiBAAA,IAAAA,EAAAC,EAAA,SAGMC,GADOC,SAASC,cAAc,QACtBD,SAASC,cAAc,0BAC/BC,EAAOF,SAASC,cAAc,wBAC9BE,EAASH,SAASC,cAAc,0BAGtC,SAASG,EAAcC,EAAUC,GAC/B,OAAO,IAAIC,SAAQ,SAACC,EAASC,GAC3B,IAAMC,EAAgBC,KAAKC,SAAW,GAEtCC,YAAW,WACLH,EACFF,EAAQ,CAAEH,WAAUS,MAAAR,IAEpBG,EAAO,CAAEJ,WAAUS,MAAAR,G,GAEpBA,E,IAZYN,SAASC,cAAc,2BAgB/Bc,iBAAiB,SAAS,SAAAC,GACnCA,EAAIC,iBAMJ,IAJA,IAAIC,EAAaC,SAASpB,EAAMqB,OAC5BC,EAAYF,SAASjB,EAAKkB,OACxBE,EAAcH,SAAShB,EAAOiB,OAE3BG,EAAI,EAAGA,GAAKD,EAAaC,GAAK,EACrCnB,EAAcmB,EAAGL,GACdM,MAAK,SAAAC,G,IAAGpB,EAAQoB,EAARpB,SAAUqB,EAAKD,EAALX,MACjBa,EAAA9B,GAAS+B,OAAOC,QACd,uBAAwCC,OAAfzB,EAAS,QAAYyB,OAANJ,EAAM,M,IAGjDK,OAAM,SAAAN,G,IAAGpB,EAAQoB,EAARpB,SAAU2B,EAAKP,EAALX,MAClBa,EAAA9B,GAAS+B,OAAOK,QACd,sBAAqCH,OAAfzB,EAAS,QAAYyB,OAANE,EAAM,M,IAG9CE,SAAQ,W,OAAMC,QAAQC,IAAI,kB,IAC1BlB,GAAcG,C","sources":["src/js/03-promises.js"],"sourcesContent":["import Notiflix from 'notiflix';\n\nconst form = document.querySelector('form');\nconst delay = document.querySelector('input[name = \"delay\"]');\nconst step = document.querySelector('input[name = \"step\"]');\nconst amount = document.querySelector('input[name = \"amount\"]');\nconst btnPromise = document.querySelector('button[type = \"submit\"]');\n\nfunction createPromise(position, delay) {\n  return new Promise((resolve, reject) => {\n    const shouldResolve = Math.random() > 0.3;\n\n    setTimeout(() => {\n      if (shouldResolve) {\n        resolve({ position, delay });\n      } else {\n        reject({ position, delay });\n      }\n    }, delay);\n  });\n}\n\nbtnPromise.addEventListener('click', evt => {\n  evt.preventDefault();\n\n  let delayFirst = parseInt(delay.value);\n  let stepDelay = parseInt(step.value);\n  const amountValue = parseInt(amount.value);\n\n  for (let i = 1; i <= amountValue; i += 1) {\n    createPromise(i, delayFirst)\n      .then(({ position, delay }) => {\n        Notiflix.Notify.success(\n          `✅ Fulfilled promise ${position} in ${delay}ms`\n        );\n      })\n      .catch(({ position, delay }) => {\n        Notiflix.Notify.failure(\n          `❌ Rejected promise ${position} in ${delay}ms`\n        );\n      })\n      .finally(() => console.log('Promise settled')),\n      (delayFirst += stepDelay);\n  }\n});\n"],"names":["$iU1Pc","parcelRequire","$ce04d3a99e08e73b$var$delay","document","querySelector","$ce04d3a99e08e73b$var$step","$ce04d3a99e08e73b$var$amount","$ce04d3a99e08e73b$var$createPromise","position","delay1","Promise","resolve","reject","shouldResolve","Math","random","setTimeout","delay","addEventListener","evt","preventDefault","delayFirst","parseInt","value","stepDelay","amountValue","i","then","param","delay2","$parcel$interopDefault","Notify","success","concat","catch","delay3","failure","finally","console","log"],"version":3,"file":"03-promises.b3a3a474.js.map"}